-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module MitsumoriApi.Interface.Node exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import MitsumoriApi.InputObject
import MitsumoriApi.Interface
import MitsumoriApi.Object
import MitsumoriApi.Scalar
import MitsumoriApi.Union
import ScalarCodecs


type alias Fragments decodesTo =
    { onProfiles : SelectionSet decodesTo MitsumoriApi.Object.Profiles
    , onQuote_tags : SelectionSet decodesTo MitsumoriApi.Object.Quote_tags
    , onQuotes : SelectionSet decodesTo MitsumoriApi.Object.Quotes
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo MitsumoriApi.Interface.Node
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "profiles" selections____.onProfiles
        , Object.buildFragment "quote_tags" selections____.onQuote_tags
        , Object.buildFragment "quotes" selections____.onQuotes
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onProfiles = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onQuote_tags = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onQuotes = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| Retrieves a record by `ID`
-}
nodeId : SelectionSet ScalarCodecs.Id MitsumoriApi.Interface.Node
nodeId =
    Object.selectionForField "ScalarCodecs.Id" "nodeId" [] (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapCodecs |> .codecId |> .decoder)
