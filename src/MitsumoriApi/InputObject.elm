-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module MitsumoriApi.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import MitsumoriApi.Enum.OrderByDirection
import MitsumoriApi.Interface
import MitsumoriApi.Object
import MitsumoriApi.Scalar
import MitsumoriApi.Union
import ScalarCodecs


buildBigIntFilter :
    (BigIntFilterOptionalFields -> BigIntFilterOptionalFields)
    -> BigIntFilter
buildBigIntFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, gt = Absent, gte = Absent, in_ = Absent, lt = Absent, lte = Absent, neq = Absent }
    in
    { eq = optionals____.eq, gt = optionals____.gt, gte = optionals____.gte, in_ = optionals____.in_, lt = optionals____.lt, lte = optionals____.lte, neq = optionals____.neq }


type alias BigIntFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.BigInt
    , gt : OptionalArgument ScalarCodecs.BigInt
    , gte : OptionalArgument ScalarCodecs.BigInt
    , in_ : OptionalArgument (List ScalarCodecs.BigInt)
    , lt : OptionalArgument ScalarCodecs.BigInt
    , lte : OptionalArgument ScalarCodecs.BigInt
    , neq : OptionalArgument ScalarCodecs.BigInt
    }


{-| Type for the BigIntFilter input object.
-}
type alias BigIntFilter =
    { eq : OptionalArgument ScalarCodecs.BigInt
    , gt : OptionalArgument ScalarCodecs.BigInt
    , gte : OptionalArgument ScalarCodecs.BigInt
    , in_ : OptionalArgument (List ScalarCodecs.BigInt)
    , lt : OptionalArgument ScalarCodecs.BigInt
    , lte : OptionalArgument ScalarCodecs.BigInt
    , neq : OptionalArgument ScalarCodecs.BigInt
    }


{-| Encode a BigIntFilter into a value that can be used as an argument.
-}
encodeBigIntFilter : BigIntFilter -> Value
encodeBigIntFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecBigInt) |> Encode.optional input____.eq ), ( "gt", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecBigInt) |> Encode.optional input____.gt ), ( "gte", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecBigInt) |> Encode.optional input____.gte ), ( "in", ((ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecBigInt) |> Encode.list) |> Encode.optional input____.in_ ), ( "lt", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecBigInt) |> Encode.optional input____.lt ), ( "lte", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecBigInt) |> Encode.optional input____.lte ), ( "neq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecBigInt) |> Encode.optional input____.neq ) ]


buildBooleanFilter :
    (BooleanFilterOptionalFields -> BooleanFilterOptionalFields)
    -> BooleanFilter
buildBooleanFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, gt = Absent, gte = Absent, in_ = Absent, lt = Absent, lte = Absent, neq = Absent }
    in
    { eq = optionals____.eq, gt = optionals____.gt, gte = optionals____.gte, in_ = optionals____.in_, lt = optionals____.lt, lte = optionals____.lte, neq = optionals____.neq }


type alias BooleanFilterOptionalFields =
    { eq : OptionalArgument Bool
    , gt : OptionalArgument Bool
    , gte : OptionalArgument Bool
    , in_ : OptionalArgument (List Bool)
    , lt : OptionalArgument Bool
    , lte : OptionalArgument Bool
    , neq : OptionalArgument Bool
    }


{-| Type for the BooleanFilter input object.
-}
type alias BooleanFilter =
    { eq : OptionalArgument Bool
    , gt : OptionalArgument Bool
    , gte : OptionalArgument Bool
    , in_ : OptionalArgument (List Bool)
    , lt : OptionalArgument Bool
    , lte : OptionalArgument Bool
    , neq : OptionalArgument Bool
    }


{-| Encode a BooleanFilter into a value that can be used as an argument.
-}
encodeBooleanFilter : BooleanFilter -> Value
encodeBooleanFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.bool |> Encode.optional input____.eq ), ( "gt", Encode.bool |> Encode.optional input____.gt ), ( "gte", Encode.bool |> Encode.optional input____.gte ), ( "in", (Encode.bool |> Encode.list) |> Encode.optional input____.in_ ), ( "lt", Encode.bool |> Encode.optional input____.lt ), ( "lte", Encode.bool |> Encode.optional input____.lte ), ( "neq", Encode.bool |> Encode.optional input____.neq ) ]


buildDateFilter :
    (DateFilterOptionalFields -> DateFilterOptionalFields)
    -> DateFilter
buildDateFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, gt = Absent, gte = Absent, in_ = Absent, lt = Absent, lte = Absent, neq = Absent }
    in
    { eq = optionals____.eq, gt = optionals____.gt, gte = optionals____.gte, in_ = optionals____.in_, lt = optionals____.lt, lte = optionals____.lte, neq = optionals____.neq }


type alias DateFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.Date
    , gt : OptionalArgument ScalarCodecs.Date
    , gte : OptionalArgument ScalarCodecs.Date
    , in_ : OptionalArgument (List ScalarCodecs.Date)
    , lt : OptionalArgument ScalarCodecs.Date
    , lte : OptionalArgument ScalarCodecs.Date
    , neq : OptionalArgument ScalarCodecs.Date
    }


{-| Type for the DateFilter input object.
-}
type alias DateFilter =
    { eq : OptionalArgument ScalarCodecs.Date
    , gt : OptionalArgument ScalarCodecs.Date
    , gte : OptionalArgument ScalarCodecs.Date
    , in_ : OptionalArgument (List ScalarCodecs.Date)
    , lt : OptionalArgument ScalarCodecs.Date
    , lte : OptionalArgument ScalarCodecs.Date
    , neq : OptionalArgument ScalarCodecs.Date
    }


{-| Encode a DateFilter into a value that can be used as an argument.
-}
encodeDateFilter : DateFilter -> Value
encodeDateFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.eq ), ( "gt", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.gt ), ( "gte", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.gte ), ( "in", ((ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDate) |> Encode.list) |> Encode.optional input____.in_ ), ( "lt", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.lt ), ( "lte", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.lte ), ( "neq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.neq ) ]


buildDatetimeFilter :
    (DatetimeFilterOptionalFields -> DatetimeFilterOptionalFields)
    -> DatetimeFilter
buildDatetimeFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, gt = Absent, gte = Absent, in_ = Absent, lt = Absent, lte = Absent, neq = Absent }
    in
    { eq = optionals____.eq, gt = optionals____.gt, gte = optionals____.gte, in_ = optionals____.in_, lt = optionals____.lt, lte = optionals____.lte, neq = optionals____.neq }


type alias DatetimeFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.Datetime
    , gt : OptionalArgument ScalarCodecs.Datetime
    , gte : OptionalArgument ScalarCodecs.Datetime
    , in_ : OptionalArgument (List ScalarCodecs.Datetime)
    , lt : OptionalArgument ScalarCodecs.Datetime
    , lte : OptionalArgument ScalarCodecs.Datetime
    , neq : OptionalArgument ScalarCodecs.Datetime
    }


{-| Type for the DatetimeFilter input object.
-}
type alias DatetimeFilter =
    { eq : OptionalArgument ScalarCodecs.Datetime
    , gt : OptionalArgument ScalarCodecs.Datetime
    , gte : OptionalArgument ScalarCodecs.Datetime
    , in_ : OptionalArgument (List ScalarCodecs.Datetime)
    , lt : OptionalArgument ScalarCodecs.Datetime
    , lte : OptionalArgument ScalarCodecs.Datetime
    , neq : OptionalArgument ScalarCodecs.Datetime
    }


{-| Encode a DatetimeFilter into a value that can be used as an argument.
-}
encodeDatetimeFilter : DatetimeFilter -> Value
encodeDatetimeFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.eq ), ( "gt", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.gt ), ( "gte", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.gte ), ( "in", ((ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.list) |> Encode.optional input____.in_ ), ( "lt", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.lt ), ( "lte", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.lte ), ( "neq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.neq ) ]


buildFloatFilter :
    (FloatFilterOptionalFields -> FloatFilterOptionalFields)
    -> FloatFilter
buildFloatFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, gt = Absent, gte = Absent, in_ = Absent, lt = Absent, lte = Absent, neq = Absent }
    in
    { eq = optionals____.eq, gt = optionals____.gt, gte = optionals____.gte, in_ = optionals____.in_, lt = optionals____.lt, lte = optionals____.lte, neq = optionals____.neq }


type alias FloatFilterOptionalFields =
    { eq : OptionalArgument Float
    , gt : OptionalArgument Float
    , gte : OptionalArgument Float
    , in_ : OptionalArgument (List Float)
    , lt : OptionalArgument Float
    , lte : OptionalArgument Float
    , neq : OptionalArgument Float
    }


{-| Type for the FloatFilter input object.
-}
type alias FloatFilter =
    { eq : OptionalArgument Float
    , gt : OptionalArgument Float
    , gte : OptionalArgument Float
    , in_ : OptionalArgument (List Float)
    , lt : OptionalArgument Float
    , lte : OptionalArgument Float
    , neq : OptionalArgument Float
    }


{-| Encode a FloatFilter into a value that can be used as an argument.
-}
encodeFloatFilter : FloatFilter -> Value
encodeFloatFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.float |> Encode.optional input____.eq ), ( "gt", Encode.float |> Encode.optional input____.gt ), ( "gte", Encode.float |> Encode.optional input____.gte ), ( "in", (Encode.float |> Encode.list) |> Encode.optional input____.in_ ), ( "lt", Encode.float |> Encode.optional input____.lt ), ( "lte", Encode.float |> Encode.optional input____.lte ), ( "neq", Encode.float |> Encode.optional input____.neq ) ]


buildIDFilter :
    (IDFilterOptionalFields -> IDFilterOptionalFields)
    -> IDFilter
buildIDFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent }
    in
    { eq = optionals____.eq }


type alias IDFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.Id }


{-| Type for the IDFilter input object.
-}
type alias IDFilter =
    { eq : OptionalArgument ScalarCodecs.Id }


{-| Encode a IDFilter into a value that can be used as an argument.
-}
encodeIDFilter : IDFilter -> Value
encodeIDFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.eq ) ]


buildIntFilter :
    (IntFilterOptionalFields -> IntFilterOptionalFields)
    -> IntFilter
buildIntFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, gt = Absent, gte = Absent, in_ = Absent, lt = Absent, lte = Absent, neq = Absent }
    in
    { eq = optionals____.eq, gt = optionals____.gt, gte = optionals____.gte, in_ = optionals____.in_, lt = optionals____.lt, lte = optionals____.lte, neq = optionals____.neq }


type alias IntFilterOptionalFields =
    { eq : OptionalArgument Int
    , gt : OptionalArgument Int
    , gte : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , lt : OptionalArgument Int
    , lte : OptionalArgument Int
    , neq : OptionalArgument Int
    }


{-| Type for the IntFilter input object.
-}
type alias IntFilter =
    { eq : OptionalArgument Int
    , gt : OptionalArgument Int
    , gte : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , lt : OptionalArgument Int
    , lte : OptionalArgument Int
    , neq : OptionalArgument Int
    }


{-| Encode a IntFilter into a value that can be used as an argument.
-}
encodeIntFilter : IntFilter -> Value
encodeIntFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.int |> Encode.optional input____.eq ), ( "gt", Encode.int |> Encode.optional input____.gt ), ( "gte", Encode.int |> Encode.optional input____.gte ), ( "in", (Encode.int |> Encode.list) |> Encode.optional input____.in_ ), ( "lt", Encode.int |> Encode.optional input____.lt ), ( "lte", Encode.int |> Encode.optional input____.lte ), ( "neq", Encode.int |> Encode.optional input____.neq ) ]


buildProfileFilter :
    (ProfileFilterOptionalFields -> ProfileFilterOptionalFields)
    -> ProfileFilter
buildProfileFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent, created_at = Absent, username = Absent, nodeId = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id, created_at = optionals____.created_at, username = optionals____.username, nodeId = optionals____.nodeId }


type alias ProfileFilterOptionalFields =
    { id : OptionalArgument UUIDFilter
    , user_id : OptionalArgument UUIDFilter
    , created_at : OptionalArgument DatetimeFilter
    , username : OptionalArgument StringFilter
    , nodeId : OptionalArgument IDFilter
    }


{-| Type for the ProfileFilter input object.
-}
type alias ProfileFilter =
    { id : OptionalArgument UUIDFilter
    , user_id : OptionalArgument UUIDFilter
    , created_at : OptionalArgument DatetimeFilter
    , username : OptionalArgument StringFilter
    , nodeId : OptionalArgument IDFilter
    }


{-| Encode a ProfileFilter into a value that can be used as an argument.
-}
encodeProfileFilter : ProfileFilter -> Value
encodeProfileFilter input____ =
    Encode.maybeObject
        [ ( "id", encodeUUIDFilter |> Encode.optional input____.id ), ( "user_id", encodeUUIDFilter |> Encode.optional input____.user_id ), ( "created_at", encodeDatetimeFilter |> Encode.optional input____.created_at ), ( "username", encodeStringFilter |> Encode.optional input____.username ), ( "nodeId", encodeIDFilter |> Encode.optional input____.nodeId ) ]


buildProfileInsertInput :
    (ProfileInsertInputOptionalFields -> ProfileInsertInputOptionalFields)
    -> ProfileInsertInput
buildProfileInsertInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent, created_at = Absent, username = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id, created_at = optionals____.created_at, username = optionals____.username }


type alias ProfileInsertInputOptionalFields =
    { id : OptionalArgument ScalarCodecs.Uuid
    , user_id : OptionalArgument ScalarCodecs.Uuid
    , created_at : OptionalArgument ScalarCodecs.Datetime
    , username : OptionalArgument String
    }


{-| Type for the ProfileInsertInput input object.
-}
type alias ProfileInsertInput =
    { id : OptionalArgument ScalarCodecs.Uuid
    , user_id : OptionalArgument ScalarCodecs.Uuid
    , created_at : OptionalArgument ScalarCodecs.Datetime
    , username : OptionalArgument String
    }


{-| Encode a ProfileInsertInput into a value that can be used as an argument.
-}
encodeProfileInsertInput : ProfileInsertInput -> Value
encodeProfileInsertInput input____ =
    Encode.maybeObject
        [ ( "id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "user_id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.user_id ), ( "created_at", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.created_at ), ( "username", Encode.string |> Encode.optional input____.username ) ]


buildProfileOrderBy :
    (ProfileOrderByOptionalFields -> ProfileOrderByOptionalFields)
    -> ProfileOrderBy
buildProfileOrderBy fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent, created_at = Absent, username = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id, created_at = optionals____.created_at, username = optionals____.username }


type alias ProfileOrderByOptionalFields =
    { id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , user_id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , created_at : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , username : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    }


{-| Type for the ProfileOrderBy input object.
-}
type alias ProfileOrderBy =
    { id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , user_id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , created_at : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , username : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    }


{-| Encode a ProfileOrderBy into a value that can be used as an argument.
-}
encodeProfileOrderBy : ProfileOrderBy -> Value
encodeProfileOrderBy input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.user_id ), ( "created_at", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.created_at ), ( "username", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.username ) ]


buildProfileUpdateInput :
    (ProfileUpdateInputOptionalFields -> ProfileUpdateInputOptionalFields)
    -> ProfileUpdateInput
buildProfileUpdateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent, created_at = Absent, username = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id, created_at = optionals____.created_at, username = optionals____.username }


type alias ProfileUpdateInputOptionalFields =
    { id : OptionalArgument ScalarCodecs.Uuid
    , user_id : OptionalArgument ScalarCodecs.Uuid
    , created_at : OptionalArgument ScalarCodecs.Datetime
    , username : OptionalArgument String
    }


{-| Type for the ProfileUpdateInput input object.
-}
type alias ProfileUpdateInput =
    { id : OptionalArgument ScalarCodecs.Uuid
    , user_id : OptionalArgument ScalarCodecs.Uuid
    , created_at : OptionalArgument ScalarCodecs.Datetime
    , username : OptionalArgument String
    }


{-| Encode a ProfileUpdateInput into a value that can be used as an argument.
-}
encodeProfileUpdateInput : ProfileUpdateInput -> Value
encodeProfileUpdateInput input____ =
    Encode.maybeObject
        [ ( "id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "user_id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.user_id ), ( "created_at", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.created_at ), ( "username", Encode.string |> Encode.optional input____.username ) ]


buildQuote_tagsFilter :
    (Quote_tagsFilterOptionalFields -> Quote_tagsFilterOptionalFields)
    -> Quote_tagsFilter
buildQuote_tagsFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, quote_id = Absent, id = Absent, nodeId = Absent }
    in
    { text = optionals____.text, quote_id = optionals____.quote_id, id = optionals____.id, nodeId = optionals____.nodeId }


type alias Quote_tagsFilterOptionalFields =
    { text : OptionalArgument StringFilter
    , quote_id : OptionalArgument UUIDFilter
    , id : OptionalArgument UUIDFilter
    , nodeId : OptionalArgument IDFilter
    }


{-| Type for the Quote\_tagsFilter input object.
-}
type alias Quote_tagsFilter =
    { text : OptionalArgument StringFilter
    , quote_id : OptionalArgument UUIDFilter
    , id : OptionalArgument UUIDFilter
    , nodeId : OptionalArgument IDFilter
    }


{-| Encode a Quote\_tagsFilter into a value that can be used as an argument.
-}
encodeQuote_tagsFilter : Quote_tagsFilter -> Value
encodeQuote_tagsFilter input____ =
    Encode.maybeObject
        [ ( "text", encodeStringFilter |> Encode.optional input____.text ), ( "quote_id", encodeUUIDFilter |> Encode.optional input____.quote_id ), ( "id", encodeUUIDFilter |> Encode.optional input____.id ), ( "nodeId", encodeIDFilter |> Encode.optional input____.nodeId ) ]


buildQuote_tagsInsertInput :
    (Quote_tagsInsertInputOptionalFields -> Quote_tagsInsertInputOptionalFields)
    -> Quote_tagsInsertInput
buildQuote_tagsInsertInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, quote_id = Absent, id = Absent }
    in
    { text = optionals____.text, quote_id = optionals____.quote_id, id = optionals____.id }


type alias Quote_tagsInsertInputOptionalFields =
    { text : OptionalArgument String
    , quote_id : OptionalArgument ScalarCodecs.Uuid
    , id : OptionalArgument ScalarCodecs.Uuid
    }


{-| Type for the Quote\_tagsInsertInput input object.
-}
type alias Quote_tagsInsertInput =
    { text : OptionalArgument String
    , quote_id : OptionalArgument ScalarCodecs.Uuid
    , id : OptionalArgument ScalarCodecs.Uuid
    }


{-| Encode a Quote\_tagsInsertInput into a value that can be used as an argument.
-}
encodeQuote_tagsInsertInput : Quote_tagsInsertInput -> Value
encodeQuote_tagsInsertInput input____ =
    Encode.maybeObject
        [ ( "text", Encode.string |> Encode.optional input____.text ), ( "quote_id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.quote_id ), ( "id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ) ]


buildQuote_tagsOrderBy :
    (Quote_tagsOrderByOptionalFields -> Quote_tagsOrderByOptionalFields)
    -> Quote_tagsOrderBy
buildQuote_tagsOrderBy fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, quote_id = Absent, id = Absent }
    in
    { text = optionals____.text, quote_id = optionals____.quote_id, id = optionals____.id }


type alias Quote_tagsOrderByOptionalFields =
    { text : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , quote_id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    }


{-| Type for the Quote\_tagsOrderBy input object.
-}
type alias Quote_tagsOrderBy =
    { text : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , quote_id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    }


{-| Encode a Quote\_tagsOrderBy into a value that can be used as an argument.
-}
encodeQuote_tagsOrderBy : Quote_tagsOrderBy -> Value
encodeQuote_tagsOrderBy input____ =
    Encode.maybeObject
        [ ( "text", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.text ), ( "quote_id", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.quote_id ), ( "id", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.id ) ]


buildQuote_tagsUpdateInput :
    (Quote_tagsUpdateInputOptionalFields -> Quote_tagsUpdateInputOptionalFields)
    -> Quote_tagsUpdateInput
buildQuote_tagsUpdateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, quote_id = Absent, id = Absent }
    in
    { text = optionals____.text, quote_id = optionals____.quote_id, id = optionals____.id }


type alias Quote_tagsUpdateInputOptionalFields =
    { text : OptionalArgument String
    , quote_id : OptionalArgument ScalarCodecs.Uuid
    , id : OptionalArgument ScalarCodecs.Uuid
    }


{-| Type for the Quote\_tagsUpdateInput input object.
-}
type alias Quote_tagsUpdateInput =
    { text : OptionalArgument String
    , quote_id : OptionalArgument ScalarCodecs.Uuid
    , id : OptionalArgument ScalarCodecs.Uuid
    }


{-| Encode a Quote\_tagsUpdateInput into a value that can be used as an argument.
-}
encodeQuote_tagsUpdateInput : Quote_tagsUpdateInput -> Value
encodeQuote_tagsUpdateInput input____ =
    Encode.maybeObject
        [ ( "text", Encode.string |> Encode.optional input____.text ), ( "quote_id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.quote_id ), ( "id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ) ]


buildQuotesFilter :
    (QuotesFilterOptionalFields -> QuotesFilterOptionalFields)
    -> QuotesFilter
buildQuotesFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, quote_text = Absent, quote_author = Absent, user_id = Absent, created_at = Absent, quote_reference = Absent, nodeId = Absent }
    in
    { id = optionals____.id, quote_text = optionals____.quote_text, quote_author = optionals____.quote_author, user_id = optionals____.user_id, created_at = optionals____.created_at, quote_reference = optionals____.quote_reference, nodeId = optionals____.nodeId }


type alias QuotesFilterOptionalFields =
    { id : OptionalArgument UUIDFilter
    , quote_text : OptionalArgument StringFilter
    , quote_author : OptionalArgument StringFilter
    , user_id : OptionalArgument UUIDFilter
    , created_at : OptionalArgument DatetimeFilter
    , quote_reference : OptionalArgument StringFilter
    , nodeId : OptionalArgument IDFilter
    }


{-| Type for the QuotesFilter input object.
-}
type alias QuotesFilter =
    { id : OptionalArgument UUIDFilter
    , quote_text : OptionalArgument StringFilter
    , quote_author : OptionalArgument StringFilter
    , user_id : OptionalArgument UUIDFilter
    , created_at : OptionalArgument DatetimeFilter
    , quote_reference : OptionalArgument StringFilter
    , nodeId : OptionalArgument IDFilter
    }


{-| Encode a QuotesFilter into a value that can be used as an argument.
-}
encodeQuotesFilter : QuotesFilter -> Value
encodeQuotesFilter input____ =
    Encode.maybeObject
        [ ( "id", encodeUUIDFilter |> Encode.optional input____.id ), ( "quote_text", encodeStringFilter |> Encode.optional input____.quote_text ), ( "quote_author", encodeStringFilter |> Encode.optional input____.quote_author ), ( "user_id", encodeUUIDFilter |> Encode.optional input____.user_id ), ( "created_at", encodeDatetimeFilter |> Encode.optional input____.created_at ), ( "quote_reference", encodeStringFilter |> Encode.optional input____.quote_reference ), ( "nodeId", encodeIDFilter |> Encode.optional input____.nodeId ) ]


buildQuotesInsertInput :
    (QuotesInsertInputOptionalFields -> QuotesInsertInputOptionalFields)
    -> QuotesInsertInput
buildQuotesInsertInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, quote_text = Absent, quote_author = Absent, user_id = Absent, created_at = Absent, quote_reference = Absent }
    in
    { id = optionals____.id, quote_text = optionals____.quote_text, quote_author = optionals____.quote_author, user_id = optionals____.user_id, created_at = optionals____.created_at, quote_reference = optionals____.quote_reference }


type alias QuotesInsertInputOptionalFields =
    { id : OptionalArgument ScalarCodecs.Uuid
    , quote_text : OptionalArgument String
    , quote_author : OptionalArgument String
    , user_id : OptionalArgument ScalarCodecs.Uuid
    , created_at : OptionalArgument ScalarCodecs.Datetime
    , quote_reference : OptionalArgument String
    }


{-| Type for the QuotesInsertInput input object.
-}
type alias QuotesInsertInput =
    { id : OptionalArgument ScalarCodecs.Uuid
    , quote_text : OptionalArgument String
    , quote_author : OptionalArgument String
    , user_id : OptionalArgument ScalarCodecs.Uuid
    , created_at : OptionalArgument ScalarCodecs.Datetime
    , quote_reference : OptionalArgument String
    }


{-| Encode a QuotesInsertInput into a value that can be used as an argument.
-}
encodeQuotesInsertInput : QuotesInsertInput -> Value
encodeQuotesInsertInput input____ =
    Encode.maybeObject
        [ ( "id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "quote_text", Encode.string |> Encode.optional input____.quote_text ), ( "quote_author", Encode.string |> Encode.optional input____.quote_author ), ( "user_id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.user_id ), ( "created_at", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.created_at ), ( "quote_reference", Encode.string |> Encode.optional input____.quote_reference ) ]


buildQuotesOrderBy :
    (QuotesOrderByOptionalFields -> QuotesOrderByOptionalFields)
    -> QuotesOrderBy
buildQuotesOrderBy fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, quote_text = Absent, quote_author = Absent, user_id = Absent, created_at = Absent, quote_reference = Absent }
    in
    { id = optionals____.id, quote_text = optionals____.quote_text, quote_author = optionals____.quote_author, user_id = optionals____.user_id, created_at = optionals____.created_at, quote_reference = optionals____.quote_reference }


type alias QuotesOrderByOptionalFields =
    { id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , quote_text : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , quote_author : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , user_id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , created_at : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , quote_reference : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    }


{-| Type for the QuotesOrderBy input object.
-}
type alias QuotesOrderBy =
    { id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , quote_text : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , quote_author : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , user_id : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , created_at : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    , quote_reference : OptionalArgument MitsumoriApi.Enum.OrderByDirection.OrderByDirection
    }


{-| Encode a QuotesOrderBy into a value that can be used as an argument.
-}
encodeQuotesOrderBy : QuotesOrderBy -> Value
encodeQuotesOrderBy input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.id ), ( "quote_text", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.quote_text ), ( "quote_author", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.quote_author ), ( "user_id", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.user_id ), ( "created_at", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.created_at ), ( "quote_reference", Encode.enum MitsumoriApi.Enum.OrderByDirection.toString |> Encode.optional input____.quote_reference ) ]


buildQuotesUpdateInput :
    (QuotesUpdateInputOptionalFields -> QuotesUpdateInputOptionalFields)
    -> QuotesUpdateInput
buildQuotesUpdateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, quote_text = Absent, quote_author = Absent, user_id = Absent, created_at = Absent, quote_reference = Absent }
    in
    { id = optionals____.id, quote_text = optionals____.quote_text, quote_author = optionals____.quote_author, user_id = optionals____.user_id, created_at = optionals____.created_at, quote_reference = optionals____.quote_reference }


type alias QuotesUpdateInputOptionalFields =
    { id : OptionalArgument ScalarCodecs.Uuid
    , quote_text : OptionalArgument String
    , quote_author : OptionalArgument String
    , user_id : OptionalArgument ScalarCodecs.Uuid
    , created_at : OptionalArgument ScalarCodecs.Datetime
    , quote_reference : OptionalArgument String
    }


{-| Type for the QuotesUpdateInput input object.
-}
type alias QuotesUpdateInput =
    { id : OptionalArgument ScalarCodecs.Uuid
    , quote_text : OptionalArgument String
    , quote_author : OptionalArgument String
    , user_id : OptionalArgument ScalarCodecs.Uuid
    , created_at : OptionalArgument ScalarCodecs.Datetime
    , quote_reference : OptionalArgument String
    }


{-| Encode a QuotesUpdateInput into a value that can be used as an argument.
-}
encodeQuotesUpdateInput : QuotesUpdateInput -> Value
encodeQuotesUpdateInput input____ =
    Encode.maybeObject
        [ ( "id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "quote_text", Encode.string |> Encode.optional input____.quote_text ), ( "quote_author", Encode.string |> Encode.optional input____.quote_author ), ( "user_id", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.user_id ), ( "created_at", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.created_at ), ( "quote_reference", Encode.string |> Encode.optional input____.quote_reference ) ]


buildStringFilter :
    (StringFilterOptionalFields -> StringFilterOptionalFields)
    -> StringFilter
buildStringFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, gt = Absent, gte = Absent, in_ = Absent, lt = Absent, lte = Absent, neq = Absent }
    in
    { eq = optionals____.eq, gt = optionals____.gt, gte = optionals____.gte, in_ = optionals____.in_, lt = optionals____.lt, lte = optionals____.lte, neq = optionals____.neq }


type alias StringFilterOptionalFields =
    { eq : OptionalArgument String
    , gt : OptionalArgument String
    , gte : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , lt : OptionalArgument String
    , lte : OptionalArgument String
    , neq : OptionalArgument String
    }


{-| Type for the StringFilter input object.
-}
type alias StringFilter =
    { eq : OptionalArgument String
    , gt : OptionalArgument String
    , gte : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , lt : OptionalArgument String
    , lte : OptionalArgument String
    , neq : OptionalArgument String
    }


{-| Encode a StringFilter into a value that can be used as an argument.
-}
encodeStringFilter : StringFilter -> Value
encodeStringFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.string |> Encode.optional input____.eq ), ( "gt", Encode.string |> Encode.optional input____.gt ), ( "gte", Encode.string |> Encode.optional input____.gte ), ( "in", (Encode.string |> Encode.list) |> Encode.optional input____.in_ ), ( "lt", Encode.string |> Encode.optional input____.lt ), ( "lte", Encode.string |> Encode.optional input____.lte ), ( "neq", Encode.string |> Encode.optional input____.neq ) ]


buildTimeFilter :
    (TimeFilterOptionalFields -> TimeFilterOptionalFields)
    -> TimeFilter
buildTimeFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, gt = Absent, gte = Absent, in_ = Absent, lt = Absent, lte = Absent, neq = Absent }
    in
    { eq = optionals____.eq, gt = optionals____.gt, gte = optionals____.gte, in_ = optionals____.in_, lt = optionals____.lt, lte = optionals____.lte, neq = optionals____.neq }


type alias TimeFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.Time
    , gt : OptionalArgument ScalarCodecs.Time
    , gte : OptionalArgument ScalarCodecs.Time
    , in_ : OptionalArgument (List ScalarCodecs.Time)
    , lt : OptionalArgument ScalarCodecs.Time
    , lte : OptionalArgument ScalarCodecs.Time
    , neq : OptionalArgument ScalarCodecs.Time
    }


{-| Type for the TimeFilter input object.
-}
type alias TimeFilter =
    { eq : OptionalArgument ScalarCodecs.Time
    , gt : OptionalArgument ScalarCodecs.Time
    , gte : OptionalArgument ScalarCodecs.Time
    , in_ : OptionalArgument (List ScalarCodecs.Time)
    , lt : OptionalArgument ScalarCodecs.Time
    , lte : OptionalArgument ScalarCodecs.Time
    , neq : OptionalArgument ScalarCodecs.Time
    }


{-| Encode a TimeFilter into a value that can be used as an argument.
-}
encodeTimeFilter : TimeFilter -> Value
encodeTimeFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecTime) |> Encode.optional input____.eq ), ( "gt", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecTime) |> Encode.optional input____.gt ), ( "gte", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecTime) |> Encode.optional input____.gte ), ( "in", ((ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecTime) |> Encode.list) |> Encode.optional input____.in_ ), ( "lt", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecTime) |> Encode.optional input____.lt ), ( "lte", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecTime) |> Encode.optional input____.lte ), ( "neq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecTime) |> Encode.optional input____.neq ) ]


buildUUIDFilter :
    (UUIDFilterOptionalFields -> UUIDFilterOptionalFields)
    -> UUIDFilter
buildUUIDFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, in_ = Absent, neq = Absent }
    in
    { eq = optionals____.eq, in_ = optionals____.in_, neq = optionals____.neq }


type alias UUIDFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.Uuid
    , in_ : OptionalArgument (List ScalarCodecs.Uuid)
    , neq : OptionalArgument ScalarCodecs.Uuid
    }


{-| Type for the UUIDFilter input object.
-}
type alias UUIDFilter =
    { eq : OptionalArgument ScalarCodecs.Uuid
    , in_ : OptionalArgument (List ScalarCodecs.Uuid)
    , neq : OptionalArgument ScalarCodecs.Uuid
    }


{-| Encode a UUIDFilter into a value that can be used as an argument.
-}
encodeUUIDFilter : UUIDFilter -> Value
encodeUUIDFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.eq ), ( "in", ((ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.list) |> Encode.optional input____.in_ ), ( "neq", (ScalarCodecs.codecs |> MitsumoriApi.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.neq ) ]
