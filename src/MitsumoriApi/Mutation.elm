-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module MitsumoriApi.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import MitsumoriApi.InputObject
import MitsumoriApi.Interface
import MitsumoriApi.Object
import MitsumoriApi.Scalar
import MitsumoriApi.ScalarCodecs
import MitsumoriApi.Union


type alias DeleteFromquoteTagsCollectionOptionalArguments =
    { filter : OptionalArgument MitsumoriApi.InputObject.Quote_tagsFilter }


type alias DeleteFromquoteTagsCollectionRequiredArguments =
    { atMost : Int }


{-| Deletes zero or more records from the collection

  - filter - Restricts the mutation's impact to records matching the critera
  - atMost - The maximum number of records in the collection permitted to be affected

-}
deleteFromquote_tagsCollection :
    (DeleteFromquoteTagsCollectionOptionalArguments -> DeleteFromquoteTagsCollectionOptionalArguments)
    -> DeleteFromquoteTagsCollectionRequiredArguments
    -> SelectionSet decodesTo MitsumoriApi.Object.Quote_tagsDeleteResponse
    -> SelectionSet decodesTo RootMutation
deleteFromquote_tagsCollection fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter MitsumoriApi.InputObject.encodeQuote_tagsFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deleteFromquote_tagsCollection" (optionalArgs____ ++ [ Argument.required "atMost" requiredArgs____.atMost Encode.int ]) object____ Basics.identity


type alias DeleteFromquotesCollectionOptionalArguments =
    { filter : OptionalArgument MitsumoriApi.InputObject.QuotesFilter }


type alias DeleteFromquotesCollectionRequiredArguments =
    { atMost : Int }


{-| Deletes zero or more records from the collection

  - filter - Restricts the mutation's impact to records matching the critera
  - atMost - The maximum number of records in the collection permitted to be affected

-}
deleteFromquotesCollection :
    (DeleteFromquotesCollectionOptionalArguments -> DeleteFromquotesCollectionOptionalArguments)
    -> DeleteFromquotesCollectionRequiredArguments
    -> SelectionSet decodesTo MitsumoriApi.Object.QuotesDeleteResponse
    -> SelectionSet decodesTo RootMutation
deleteFromquotesCollection fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter MitsumoriApi.InputObject.encodeQuotesFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deleteFromquotesCollection" (optionalArgs____ ++ [ Argument.required "atMost" requiredArgs____.atMost Encode.int ]) object____ Basics.identity


type alias InsertIntoquoteTagsCollectionRequiredArguments =
    { objects : List MitsumoriApi.InputObject.Quote_tagsInsertInput }


{-| Adds one or more `quote_tagsInsertResponse` records to the collection
-}
insertIntoquote_tagsCollection :
    InsertIntoquoteTagsCollectionRequiredArguments
    -> SelectionSet decodesTo MitsumoriApi.Object.Quote_tagsInsertResponse
    -> SelectionSet (Maybe decodesTo) RootMutation
insertIntoquote_tagsCollection requiredArgs____ object____ =
    Object.selectionForCompositeField "insertIntoquote_tagsCollection" [ Argument.required "objects" requiredArgs____.objects (MitsumoriApi.InputObject.encodeQuote_tagsInsertInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias InsertIntoquotesCollectionRequiredArguments =
    { objects : List MitsumoriApi.InputObject.QuotesInsertInput }


{-| Adds one or more `quotesInsertResponse` records to the collection
-}
insertIntoquotesCollection :
    InsertIntoquotesCollectionRequiredArguments
    -> SelectionSet decodesTo MitsumoriApi.Object.QuotesInsertResponse
    -> SelectionSet (Maybe decodesTo) RootMutation
insertIntoquotesCollection requiredArgs____ object____ =
    Object.selectionForCompositeField "insertIntoquotesCollection" [ Argument.required "objects" requiredArgs____.objects (MitsumoriApi.InputObject.encodeQuotesInsertInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdatequoteTagsCollectionOptionalArguments =
    { filter : OptionalArgument MitsumoriApi.InputObject.Quote_tagsFilter }


type alias UpdatequoteTagsCollectionRequiredArguments =
    { set : MitsumoriApi.InputObject.Quote_tagsUpdateInput
    , atMost : Int
    }


{-| Updates zero or more records in the collection

  - set - Fields that are set will be updated for all records matching the `filter`
  - filter - Restricts the mutation's impact to records matching the critera
  - atMost - The maximum number of records in the collection permitted to be affected

-}
updatequote_tagsCollection :
    (UpdatequoteTagsCollectionOptionalArguments -> UpdatequoteTagsCollectionOptionalArguments)
    -> UpdatequoteTagsCollectionRequiredArguments
    -> SelectionSet decodesTo MitsumoriApi.Object.Quote_tagsUpdateResponse
    -> SelectionSet decodesTo RootMutation
updatequote_tagsCollection fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter MitsumoriApi.InputObject.encodeQuote_tagsFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "updatequote_tagsCollection" (optionalArgs____ ++ [ Argument.required "set" requiredArgs____.set MitsumoriApi.InputObject.encodeQuote_tagsUpdateInput, Argument.required "atMost" requiredArgs____.atMost Encode.int ]) object____ Basics.identity


type alias UpdatequotesCollectionOptionalArguments =
    { filter : OptionalArgument MitsumoriApi.InputObject.QuotesFilter }


type alias UpdatequotesCollectionRequiredArguments =
    { set : MitsumoriApi.InputObject.QuotesUpdateInput
    , atMost : Int
    }


{-| Updates zero or more records in the collection

  - set - Fields that are set will be updated for all records matching the `filter`
  - filter - Restricts the mutation's impact to records matching the critera
  - atMost - The maximum number of records in the collection permitted to be affected

-}
updatequotesCollection :
    (UpdatequotesCollectionOptionalArguments -> UpdatequotesCollectionOptionalArguments)
    -> UpdatequotesCollectionRequiredArguments
    -> SelectionSet decodesTo MitsumoriApi.Object.QuotesUpdateResponse
    -> SelectionSet decodesTo RootMutation
updatequotesCollection fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter MitsumoriApi.InputObject.encodeQuotesFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "updatequotesCollection" (optionalArgs____ ++ [ Argument.required "set" requiredArgs____.set MitsumoriApi.InputObject.encodeQuotesUpdateInput, Argument.required "atMost" requiredArgs____.atMost Encode.int ]) object____ Basics.identity
